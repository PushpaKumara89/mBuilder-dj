# Generated by Django 3.1.4 on 2021-01-19 13:09
from django.db import connection, migrations


def get_duplicated_recipients_emails(cursor):
    cursor.execute("SELECT email FROM recipients GROUP BY email HAVING count(*) > 1")

    return cursor.fetchall()


def get_first_recipient_id_by_duplicated_email(cursor, email):
    cursor.execute("SELECT id, user_id FROM recipients WHERE email = %s", [email])

    return cursor.fetchall()


def get_user_id_by_email(cursor, email):
    cursor.execute("SELECT id FROM auth_user WHERE email = %s", [email])

    return cursor.fetchall()


def update_user_id_field_for_recipient(cursor, recipient_id, user_id):
    cursor.execute('UPDATE recipients SET user_id = %s WHERE id = %s',[user_id, recipient_id])


def get_subtasks_updates_recipients_ids(cursor, email, first_recipient_id):
    cursor.execute("SELECT id, subtaskupdate_id FROM subtasks_updates_recipients WHERE recipient_id IN (SELECT id FROM recipients WHERE email = %s AND id != %s)", [email, first_recipient_id])

    return cursor.fetchall()


def get_tasks_updates_recipients_ids(cursor, email, first_recipient_id):
    cursor.execute("SELECT id, taskupdate_id FROM tasks_updates_recipients WHERE recipient_id IN (SELECT id FROM recipients WHERE email = %s AND id != %s)", [email, first_recipient_id])

    return cursor.fetchall()


def count_existing_relations_between_subtaskupdate_and_new_recipient_id(cursor, subtask_update_id, new_recipient_id):
    cursor.execute("SELECT count(*) FROM subtasks_updates_recipients WHERE subtaskupdate_id = %s and recipient_id = %s", [subtask_update_id, new_recipient_id])

    return cursor.fetchall()


def count_existing_relations_between_taskupdate_and_new_recipient_id(cursor, task_update_id, new_recipient_id):
    cursor.execute("SELECT count(*) FROM tasks_updates_recipients WHERE taskupdate_id = %s and recipient_id = %s", [task_update_id, new_recipient_id])

    return cursor.fetchall()


def delete_subtask_updates_recipients(cursor, subtask_updates_recipients_id):
    cursor.execute("DELETE FROM subtasks_updates_recipients WHERE id = %s", [subtask_updates_recipients_id])


def update_subtask_updates_recipient(cursor, recipient_id, subtask_updates_recipients_id):
    cursor.execute("UPDATE subtasks_updates_recipients SET recipient_id = %s WHERE id = %s", [recipient_id, subtask_updates_recipients_id])


def delete_task_updates_recipients(cursor, task_updates_recipients_id):
    cursor.execute("DELETE FROM tasks_updates_recipients WHERE id = %s", [task_updates_recipients_id])


def update_task_updates_recipient(cursor, recipient_id, task_updates_recipients_id):
    cursor.execute("UPDATE tasks_updates_recipients SET recipient_id = %s WHERE id = %s", [recipient_id, task_updates_recipients_id])


def delete_duplicated_recipients_except_first(cursor, email, first_id):
    cursor.execute('DELETE FROM recipients WHERE email = %s AND id != %s', [email, first_id])


def delete_duplicated_recipients(*args, **kwargs):
    with connection.cursor() as cursor:
        duplicated_recipients_emails = get_duplicated_recipients_emails(cursor)

        for duplicated_recipients_email in duplicated_recipients_emails:
            first_recipient_id_of_duplicated = get_first_recipient_id_by_duplicated_email(cursor, duplicated_recipients_email[0])[0]
            if first_recipient_id_of_duplicated[1] is not None:
                user_id = get_user_id_by_email(cursor, duplicated_recipients_email[0])[0][0]
                update_user_id_field_for_recipient(cursor, first_recipient_id_of_duplicated[0], user_id)

            subtask_updates_recipients_ids = get_subtasks_updates_recipients_ids(cursor, duplicated_recipients_email[0], first_recipient_id_of_duplicated[0])
            for subtask_updates_recipients_id in subtask_updates_recipients_ids:
                count = count_existing_relations_between_subtaskupdate_and_new_recipient_id(cursor, subtask_updates_recipients_id[1], first_recipient_id_of_duplicated[0])
                if count[0][0] > 0:
                    delete_subtask_updates_recipients(cursor, subtask_updates_recipients_id[0])
                else:
                    update_subtask_updates_recipient(cursor, first_recipient_id_of_duplicated[0], subtask_updates_recipients_id[0])

            task_updates_recipients_ids = get_tasks_updates_recipients_ids(cursor, duplicated_recipients_email[0], first_recipient_id_of_duplicated[0])
            for task_updates_recipients_id in task_updates_recipients_ids:
                count = count_existing_relations_between_taskupdate_and_new_recipient_id(cursor, task_updates_recipients_id[1], first_recipient_id_of_duplicated[0])
                if count[0][0] > 0:
                    delete_task_updates_recipients(cursor, task_updates_recipients_id[0])
                else:
                    update_task_updates_recipient(cursor, first_recipient_id_of_duplicated[0], task_updates_recipients_id[0])

            delete_duplicated_recipients_except_first(cursor, duplicated_recipients_email[0], first_recipient_id_of_duplicated[0])


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0066_set_status_for_existing_users'),
    ]

    operations = [
        migrations.RunPython(delete_duplicated_recipients),
    ]
